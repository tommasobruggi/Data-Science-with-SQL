Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
	i. Attribute table = 			10000 
	ii. Business table = 			10000
	iii. Category table = 			10000
	iv. Checkin table = 			10000
	v. elite_years table = 			10000
	vi. friend table = 			10000
	vii. hours table = 			10000
	viii. photo table = 			10000
	ix. review table = 			10000
	x. tip table = 				10000
	xi. user table = 			10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

	i. 	Business =			10000 	(id PRIMARY KEY )
	ii. 	Hours =				1562 	(business_id FOREIGN KEY)
	iii. 	Category =			2643    (business_id FOREIGN KEY)
	iv. 	Attribute =			1115	(business_id FOREIGN KEY)
	v. 	Review =			10000	(id PRIMARY KEY),		8090 (business_id FOREIGN KEY), 	9581 (user_id FOREIGN KEY)
	vi. 	Checkin = 			493 	(business_id FOREIGN KEY)
	vii. 	Photo =				10000	(id PRIMARY KEY),		6493 (business_id FOREIGN KEY)
	viii. 	Tip = 				537	(user_id FOREIGN KEY),      	3979 (business_id FOREIGN KEY)
	ix. 	User = 				10000	(id PRIMARY KEY)
	x. 	Friend = 			11	(user_id FOREIGN KEY)
	xi. 	Elite_years =	                2780	(user_id FOREIGN KEY)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no.
	
	SQL code used to arrive at answer:
	
SELECT *
From user
Where 
id IS NULL OR 
name IS NULL OR
review_count IS NULL OR
yelping_since IS NULL OR
useful IS NULL OR
funny IS NULL OR
cool IS NULL OR
fans IS NULL OR
average_stars IS NULL OR
compliment_hot IS NULL OR
compliment_more IS NULL OR
compliment_profile IS NULL OR 
compliment_cute IS NULL OR 
compliment_list IS NULL OR
compliment_note IS NULL OR
compliment_plain IS NULL OR
compliment_cool IS NULL OR
compliment_funny IS NULL OR
compliment_writer IS NULL OR
compliment_photos IS NULL;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:



i. Table: Review, Column: Stars
		min: 1		max: 5		avg: 3.7082
		
	ii. Table: Business, Column: Stars
		min: 1.0	max: 5.0	avg: 3.6549
	
	iii. Table: Tip, Column: Likes
		min: 0		max: 2		avg: 0.0144
	
	iv. Table: Checkin, Column: Count
		min: 1		max: 53		avg: 1.9414
	
	v. Table: User, Column: Review_count
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
SELECT sum(review_count) as TotReviews, city
From business
Group by city
Order by TotReviews DESC;

	
	Copy and Paste the Result Below:
	
TotReviews | city            |
+------------+-----------------+
|      82854 | Las Vegas       |
|      34503 | Phoenix         |
|      24113 | Toronto         |
|      20614 | Scottsdale      |
|      12523 | Charlotte       |
|      10871 | Henderson       |
|      10504 | Tempe           |
|       9798 | Pittsburgh      |
|       9448 | Montréal        |
|       8112 | Chandler        |
|       6875 | Mesa            |
|       6380 | Gilbert         |
|       5593 | Cleveland       |
|       5265 | Madison         |
|       4406 | Glendale        |
|       3814 | Mississauga     |
|       2792 | Edinburgh       |
|       2624 | Peoria          |
|       2438 | North Las Vegas |
|       2352 | Markham         |
|       2029 | Champaign       |
|       1849 | Stuttgart       |
|       1520 | Surprise        |
|       1465 | Lakewood        |
|       1155 | Goodyear        |
+------------+-----------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, count(stars) as Tally
From business
where city = 'Avon'
Group by stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------+
| stars | Tally |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, count(stars) as Tally
From business
where city = 'Beachwood'
Group by stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------+
| stars | Tally |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

select name, review_count
from user
order by review_count desc
limit 3;
	
		
	Copy and Paste the Result Below:


+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

No. As review_count diminishes on the right, the number of fans does not seem to be affected. The extremum at very low review_count was checked for confirmation.
A more quantitative answer by plotting these two and performing a regression to calculate the correlation coefficient would be needed but I suspect this would be near 0.

SQL code:

SELECT fans, review_count
From user
Order by review_count Desc;

Results:

+------+--------------+
| fans | review_count |
+------+--------------+
|  253 |         2000 |
|   50 |         1629 |
|   76 |         1339 |
|  101 |         1246 |
|  126 |         1215 |
|  311 |         1153 |
|   16 |         1116 |
|  104 |         1039 |
|  497 |          968 |
|  173 |          930 |
+------+--------------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: 

+-----------+-----------+
| CountLove | CountHate |
+-----------+-----------+
|      1080 |        82 |
+-----------+-----------+

	
	SQL code used to arrive at answer:

--We look for the word "love" and not the characters "love" inside a word like "lovely".
SELECT 
    (SELECT count(id)
    From review
    Where text LIKE '% love %') as CountLove,

    (SELECT count(id)
    From review
    Where text LIKE '% hate %') as CountHate;

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT name, fans
from user
ORDER BY fans desc
limit 10;
	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

	
		
Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

	
i. Do the two groups you chose to analyze have a different distribution of hours?


Yes. The 2-3 stars business have very long hours, whilst the 3-4 stars have shorter hours. However, the sample size is small, so there is low certainty. 


ii. Do the two groups you chose to analyze have a different number of reviews?


The 2-3 group has a review_count = [6, 123] which is a very wide range with a high average.
The 3-4 group has a review_count = [16, 32, 4] which is a smaller ranger and a smaller average. 
It seems that 3-4 groups has lower review_counts but sample size is very small to say with high confidence.

 
iii. Are you able to infer anything from the location data provided between these two groups? Explain.


The 2-3 group has a postal_code list = [89121, 89103] which are small.
The 3-4 group has a postal_code list = [89118, 89161, 89118] which are on average larger.
It seems the area with larger postal codes gets higher stars.


SQL Code:

SELECT business.name, business.stars, hours.hours, business.review_count, business.postal_code
from business
INNER JOIN hours ON business.id = hours.business_id
where business.city = 'Las Vegas' 
Group by business.stars;

Result: 

+--------------------------------+-------+---------------------+--------------+-------------+
| name                           | stars | hours               | review_count | postal_code |
+--------------------------------+-------+---------------------+--------------+-------------+
| Walgreens                      |   2.5 | Saturday|8:00-22:00 |            6 | 89121       |
| Wingstop                       |   3.0 | Saturday|11:00-0:00 |          123 | 89103       |
| Hi Scores - Blue Diamond       |   3.5 | Saturday|0:00-0:00  |          105 | 89139       |
| Anthem Pediatrics              |   4.0 | Saturday|8:00-12:00 |           16 | 89118       |
| Red Rock Canyon Visitor Center |   4.5 | Saturday|8:00-16:30 |           32 | 89161       |
| Desert Medical Equipment       |   5.0 | Monday|8:00-17:00   |            4 | 89118       |
+--------------------------------+-------+---------------------+--------------+-------------+



		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

If is_open = 1 so if the business is open, it is more likely to have higher stars.
An average of 3.66393442623 closed compared to 3.89982578397 open. 
Sample size is large, so this is a significant difference.
         
         
ii. Difference 2:

If the business is open, it is more likely to have a high review_count.
An average of 36.9098360656 closed compared to 56.6672473868 open.
Sample size is large, so this is a significant difference.
         
         
SQL code used for analysis:

SELECT business.name, AVG(business.stars), business.is_open, AVG(business.review_count), category.category
from business
INNER JOIN category ON business.id = category.business_id
ORDER BY stars ASC;


	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:


Does positive words like %love%' OR '%happy%' OR '%great%' OR '%fantastic%' in the reviews correlate with the stars of a business and correlate with the review_count?
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:


I need the text of reviews. I need the stars of the businesses and the review_count of the businesses.
                           
                  
iii. Output of your finished dataset:

We can see that have the words %love%' OR '%happy%' OR '%great%' OR '%fantastic%' has increased by over an order of magnitude the review count and has increase the average stars, as one might expect.

+----------------------------+----------------------+
| AveragePositiveReviewCount | AveragePositiveStars |
+----------------------------+----------------------+
|              323.803149606 |         3.9094488189 |
+----------------------------+----------------------+

+----------------------------+---------------------+
| AVG(business.review_count) | AVG(business.stars) |
+----------------------------+---------------------+
|                    30.4561 |              3.6549 |
+----------------------------+---------------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT count(review.id), AVG(business.review_count), AVG(business.stars)
From review
LEFT JOIN business ON review.business_id = business.id
Where text LIKE '%love%' OR '%happy%' OR '%great%' OR '%fantastic%';


SELECT AVG(business.review_count) as AverageReviewCountTotal, AVG(business.stars) as AverageStarsTotal
From business;
